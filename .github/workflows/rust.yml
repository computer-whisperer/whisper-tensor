name: Rust

on:
  push:
    branches: [ "main" ]
    # paths-ignore:
    #   - '**/*.md'
    #   - 'docs/**'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

concurrency:
  group: rust-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Avoid incremental artifacts flapping CI timings
  CARGO_INCREMENTAL: 0
  # Let tch-rs use the Python Pytorch install for libtorch (simple CPU-only path)
  LIBTORCH_USE_PYTORCH: "1"

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust (stable) + components
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo (registry, git, target)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('.github/workflows/rust.yml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # protoc for prost-build invoked from build.rs
      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: "28.x"


        # Install a CPU-only PyTorch wheel and expose its lib directory
      - name: Set up Python (for libtorch via PyTorch)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install PyTorch (CPU) and export library path
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Pin to the libtorch version your tch-rs expects (adjust if needed)
          python -m pip install --no-cache-dir torch==2.7.0 --index-url https://download.pytorch.org/whl/cpu
          TORCH_LIB="$(python -c 'import torch, pathlib; print(pathlib.Path(torch.__file__).with_name("lib"))')"
          echo "LD_LIBRARY_PATH=$TORCH_LIB:$LD_LIBRARY_PATH" >> "$GITHUB_ENV"
          echo "Using torch from: $TORCH_LIB"

      - name: Install Mesa Vulkan (lavapipe) + tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mesa-vulkan-drivers libvulkan-dev vulkan-tools vulkan-validationlayers jq

      - name: Select lavapipe ICD
        shell: bash
        run: |
          ICD=$(ls /usr/share/vulkan/icd.d/lvp_icd*.json | head -n1)
          if [[ -z "$ICD" ]]; then
            echo "lavapipe ICD not found"; exit 1
          fi
          echo "VK_ICD_FILENAMES=$ICD" >> "$GITHUB_ENV"
          # Optional: prefer software everywhere
          echo "LIBGL_ALWAYS_SOFTWARE=1" >> "$GITHUB_ENV"

      - name: Smoke test Vulkan
        run: |
          vulkaninfo | head -n 50 || (echo "vulkaninfo failed" && exit 1)

      - name: Compute package filters (exclude /libs)
        id: pkgs
        shell: bash
        run: |
          META=$(cargo metadata --no-deps --format-version 1)
          # Packages located under /libs/
          mapfile -t EXCL < <(echo "$META" | jq -r '.packages[] | select(.manifest_path | test("/libs/")) | .name')
          # Packages NOT under /libs/ (used for rustfmt which lacks --exclude)
          mapfile -t INCL < <(echo "$META" | jq -r '.packages[] | select(.manifest_path | test("/libs/") | not) | .name')
          
          EXCLUDE_ARGS=""
          for p in "${EXCL[@]}"; do EXCLUDE_ARGS+=" --exclude $p"; done
          
          FMT_ARGS=""
          for p in "${INCL[@]}"; do FMT_ARGS+=" -p $p"; done
          
          echo "exclude_args=${EXCLUDE_ARGS}" >> "$GITHUB_OUTPUT"
          echo "fmt_args=${FMT_ARGS}" >> "$GITHUB_OUTPUT"

      - name: Check formatting (exclude /libs)
        run: cargo fmt ${{ steps.pkgs.outputs.fmt_args }} -- --check

      - name: Clippy whisper-tensor (fail on warnings; exclude /libs)
        run: cargo clippy -p whisper-tensor --no-deps --all-features  -- -D warnings

      - name: Clippy whisper-tensor-server (fail on warnings; exclude /libs)
        run: cargo clippy -p whisper-tensor-server --no-deps --all-features -- -D warnings

      - name: Clippy whisper-tensor-import (fail on warnings; exclude /libs)
        run: cargo clippy -p whisper-tensor-import --no-deps --all-features -- -D warnings

      - name: Build (workspace; exclude /libs)
        run: cargo build --workspace --all-features --locked --verbose ${{ steps.pkgs.outputs.exclude_args }}

      - name: Test (workspace; exclude /libs)
        run: cargo test --workspace --all-features --locked --verbose ${{ steps.pkgs.outputs.exclude_args }}